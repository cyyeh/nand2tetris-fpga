/**
* library to draw on the little MOD-LCD28RTP screen
* screen has 320 x 240 pixels and 16 bit color codes. 
*/
class Screen {
	static Array screen;
	static int color;
	static int backcolor;

	/** init screen connected to given memory map address */
	function void init(int addr){
		let screen = addr;
		let color=-1;
		let backcolor=0;
  		
		do Screen.writeCommand(54);//0X36
		do Screen.writeData(72);            // Memory Access Control
  		
  		
		do Screen.writeCommand(58);//0x3A //RGB 16 bit !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!11
		do Screen.writeData(85);
		
  		do Screen.writeCommand(17);//0x11
		do Sys.wait(500);
  		
		do Screen.writeCommand(41);//0x29
		do Sys.wait(500);
			
		do Screen.clearScreen();
		return;
	}	

	/** paint all pixels on the screen in backcolor */
	function void clearScreen(){
		var int dummy;
		let dummy = color;
		let color = backcolor;
		do Screen.drawRectangle(0,0,240,320);
		let color = dummy;
		return;
	}

	/** draw pixel at x,y in selected color */
	function void drawPixel(int x,int y){
		if ((x<0)|(x>239)|(y<0)|(y>319)){
			do Sys.error(7);
		}
    	do Screen.writeCommand(42); // Column addr set
    	do Screen.writeData16(x);
    	do Screen.writeData16(x);
    	do Screen.writeCommand(43); // Row addr set
    	do Screen.writeData16(y);
    	do Screen.writeData16(y);
		do Screen.writeCommand(44); // write to RAM
		do Screen.writeData16(color);
		return;
	}

	/**	change selelcted color to 16 bit color value c (rrrrrgggggbbbbb)*/
	function void setColor(int c){
		let color=c;
		return;
	}

	/** change backgroung color to 16 bit value c */	
	function void setBackColor(int c){
		let backcolor=c;
		return;
	}
	
	/** set next pixel to selected color */
	function void paintPixel(){
		do Screen.writeData16(color);
		return;
	}
	
	/** set next pixel to backgroundcolor */
	function void clearPixel(){
		do Screen.writeData16(backcolor);
		return;
	}

	/** draw line in selected color between points (x1,y1) and (x2,y2) */	
	function void drawLine(int x1,int y1,int x2,int y2){
		var int dx,dy;
		var int vx,vy;
		let dx=x2-x1;
		let dy=y2-y1;
		if (dx<0){
			let vx=-1;
		} else {
			let vx=1;
		}
		if (dy<0){
			let vy=-1;
		} else {
			let vy=1;
		}
		if (dy=0){
			while (~(x1=x2)){
				do Screen.drawPixel(x1,y1);
				let x1=x1+vx;
			}
			do Screen.drawPixel(x1,y2);
			return;
		}
		if (dx=0){
			while (~(y1=y2)){
				do Screen.drawPixel(x1,y1);
				let y1=y1+vy;
			}
			do Screen.drawPixel(x1,y2);
			return;
		}
		while(~((x2=x1)&(y2=y1))){
			do Screen.drawPixel(x1,y1);
			if (Math.abs((x2-x1)*dy)>Math.abs((y2-y1)*dx)){
				let x1=x1+vx;
			} else {
				let y1=y1+vy;
			}
		}
		do Screen.drawPixel(x1,y1);

		
		return;
	}

	/** draw rectangle at (x,y) with width w and height h */
	function void drawRectangle(int x, int y, int w, int h){
		var int i;
		var int j;
    	do Screen.setAddrWindow(x, y, w, h);
		let j=0;
		while (j<h){
			let i=0;
			while (i<w){
				do Screen.writeData16(color);
				let i=i+1;
			}
			let j=j+1;
		}
		return;
	}

	/** draw a circle with center (x,y) and radius r */
	function void drawCircle(int x, int y, int r){
		var int dy,x1,x2,s;
		let dy=0;
		while (~(dy=r)){
			let s=Math.sqrt((r*r)-(dy*dy));
			do Screen.drawLine(x-s,y+dy,x+s,y+dy);
			do Screen.drawLine(x-s,y-dy,x+s,y-dy);
			let dy=dy+1;
		}
		return;
	}

	/** set addresswindow of MOD-LCD28RTP */	
	function void setAddrWindow(int x, int y, int w, int h){
    	do Screen.writeCommand(42); // Column addr set
    	do Screen.writeData16(x);
    	do Screen.writeData16(x+w-1);
    	do Screen.writeCommand(43); // Row addr set
    	do Screen.writeData16(y);
    	do Screen.writeData16(y+h-1);
		do Screen.writeCommand(44); // write to RAM
		return;
	}

	/** write 8 bit data to MOD-LCD28RTP */
	function void writeData(int data){
		let screen[1] = data;
		return;
	}
	
	/** write 16 bit data to MOD-LCD28RTP */
	function void writeData16(int data){
		let screen[2] = data;
		return;
	}
	
	/** write 8 bit command to MOD-LCD28RTP */
	function void writeCommand(int command){
		let screen[0]=command;
		return;
	}
	
	/** a list of 16 bit color codes (rrrrrggggggbbbbb) */
	function int BLACK(){
		return 0;	//00000 000000 00000
	}
	function int NAVY(){
		return 16;  //00000 000000 10000
	}
	function int BLUE(){
		return 31;  //00000 000000 11111
	}
	function int GREEN(){
		return 2016; //00000 111111 00000
	}
	function int CYAN(){
		return 2047; //00000 111111 11111
	}
	function int MAROON(){
		return ~32767; //10000 000000 00000
	}
	function int PURPLE(){
		return -32752; //10000 000000 10000
	}
	function int OLIVE(){
		return -31744; //10000 100000 00000
	}

	function int DARKGREY(){
		return -31728; //10000 100000 10000
	}
	function int LIGHTGREY(){
		return -14824; //11000 110000 11000
	}
	function int RED(){
		return -2048; //11111 000000 00000
	}
	function int MAGENTA(){
		return -2017; //11111 000000 11111
	}
	function int YELLOW(){
		return -32; //11111 111111 00000
	}
	function int ORANGE(){
		return -736; //11111 101001 00000
	}
	function int WHITE(){
		return -1; //11111 111111 11111
	}
}
