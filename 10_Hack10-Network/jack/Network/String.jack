/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */

class String {
	field int mLength;
	field Array pointer;
	field int length;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
		if (maxLength<0){
			do Sys.error(14);
		}
		if (maxLength>0){
			let pointer=Array.new(maxLength);
		}
		let mLength=maxLength;
		let length=0;
		return this;
    }

    /** Disposes this string. */
    method void dispose() {
		if (mLength>0){
			do pointer.dispose();
		}
		do Memory.deAlloc(this);
		return;
    }

    /** Returns the current length of this string. */
    method int length() {
		return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
		if ((j<0)|(j>length)|(j=length)){
			do Sys.error(15);
		}
		return pointer[j];
	}

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
		if ((j<0)|(j>length)|(j=length)){
			do Sys.error(16);
		}
    	let pointer[j]=c;
		return;
	}

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
		if (length=mLength){
			do Sys.error(17);
		}
		let pointer[length]=c;
		let length=length+1;
		return this;
	}

	method String appendArray(Array a, int len) {
		var int i;
		let i = 0;
		while (i<len){
			do appendChar(a[i]);
			let i=i+1;
		}
		return this;
	}
	
    /** Erases the last character from this string. */
    method void eraseLastChar() {
		if (length=0){
			do Sys.error(18);
		}
		let length=length-1;
		return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
		var int pos,val,digit;
		var boolean ok,vz;
		if (length=0){
			return 0;
		}
		let ok=true;
		if (pointer[0]=45){
			let vz=true;
			let pos=1;
		}
		while ((pos<length) & ok){
			let digit=pointer[pos]-48;
			let ok=~((digit<0)|(digit>9));
			if (ok){
				let val=val*10+digit;
				let pos=pos+1;
			}
		}
		if (vz){
			let val=-val;
		}
		return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
		var int pos,c;
		var Array s;
		var boolean vz;
		if (mLength=0){
			do Sys.error(19);
		}
		let s=Array.new(6);
		if (val<0){
			let vz=true;
			let val=-val;
		}
		let c=val;
		while (c>0){
			let c=Math.divide(val,10);
			let s[pos]=48+(val-(c*10));
			let pos=pos+1;
			let val=c;
	
		}
		if (vz){
			let s[pos]=45;
			let pos=pos+1;
		}
		if (mLength<pos){
			do Sys.error(19);
		}
		if (pos=0){
			let pointer[0]=48;
			let length=1;
		}else{
			let length=0;
			while (length<pos){
				let pointer[length]=s[pos-(length+1)];
				let length=length+1;
			}
		}
		do s.dispose();
		return;
	}

    /** Returns the new line character. */
    function char newLine() {
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
    }
}
