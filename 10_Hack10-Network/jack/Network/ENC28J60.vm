function ENC28J60.readControlRegister 1
push constant 0
push static 0
add
push constant 512
push argument 0
or
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
push static 0
add
push constant 512
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 0
add
pop pointer 1
push that 0
pop local 0
push constant 0
push static 0
add
push constant 256
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
return
function ENC28J60.readBufferMemory 1
push constant 0
push static 0
add
push constant 512
push constant 58
or
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
pop local 0
label while2
push local 0
push argument 1
lt
not
if-goto whileend2
push constant 0
push static 0
add
push constant 512
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push argument 0
add
push static 0
push constant 0
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto while2
label whileend2
push constant 0
push static 0
add
push constant 256
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function ENC28J60.writeControlRegister 0
push constant 0
push static 0
add
push constant 512
push constant 64
add
push argument 0
or
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
push static 0
add
push constant 512
push argument 1
or
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
push static 0
add
push constant 256
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function ENC28J60.writeBufferMemory 2
push argument 0
call String.length 1
pop local 1
push constant 0
push static 0
add
push constant 512
push constant 122
or
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
pop local 0
label while2
push local 0
push local 1
lt
not
if-goto whileend2
push constant 0
push static 0
add
push constant 512
push argument 0
push local 0
call String.charAt 2
or
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto while2
label whileend2
push constant 0
push static 0
add
push constant 256
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function ENC28J60.bitFieldSet 0
push constant 0
push static 0
add
push constant 512
push constant 128
or
push argument 0
or
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
push static 0
add
push constant 512
push argument 1
or
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
push static 0
add
push constant 256
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function ENC28J60.bitFieldClear 0
push constant 0
push static 0
add
push constant 512
push constant 160
or
push argument 0
or
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
push static 0
add
push constant 512
push argument 1
or
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
push static 0
add
push constant 256
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function ENC28J60.systemResetCommand 0
push constant 0
push static 0
add
push constant 512
push constant 255
or
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
push static 0
add
push constant 256
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function ENC28J60.init 0
push argument 0
pop static 0
push constant 0
push static 0
add
push constant 256
pop temp 0
pop pointer 1
push temp 0
pop that 0
call ENC28J60.systemResetCommand 0
pop temp 0
push constant 2
call Sys.wait 1
pop temp 0
push constant 8
push constant 0
call ENC28J60.writeControlRegister 2
pop temp 0
push constant 9
push constant 0
call ENC28J60.writeControlRegister 2
pop temp 0
push constant 10
push constant 255
call ENC28J60.writeControlRegister 2
pop temp 0
push constant 11
push constant 15
call ENC28J60.writeControlRegister 2
pop temp 0
push constant 12
push constant 255
call ENC28J60.writeControlRegister 2
pop temp 0
push constant 13
push constant 15
call ENC28J60.writeControlRegister 2
pop temp 0
push constant 0
pop static 1
push constant 31
push constant 2
call ENC28J60.bitFieldSet 2
pop temp 0
push constant 0
push constant 13
call ENC28J60.writeControlRegister 2
pop temp 0
push constant 2
push constant 50
call ENC28J60.writeControlRegister 2
pop temp 0
push constant 3
push constant 128
call ENC28J60.writeControlRegister 2
pop temp 0
push constant 4
push constant 18
call ENC28J60.writeControlRegister 2
pop temp 0
push constant 6
push constant 18
call ENC28J60.writeControlRegister 2
pop temp 0
push constant 7
push constant 12
call ENC28J60.writeControlRegister 2
pop temp 0
push constant 31
push constant 3
call ENC28J60.bitFieldSet 2
pop temp 0
push constant 4
push argument 1
push constant 0
add
pop pointer 1
push that 0
call ENC28J60.writeControlRegister 2
pop temp 0
push constant 5
push argument 1
push constant 1
add
pop pointer 1
push that 0
call ENC28J60.writeControlRegister 2
pop temp 0
push constant 2
push argument 1
push constant 2
add
pop pointer 1
push that 0
call ENC28J60.writeControlRegister 2
pop temp 0
push constant 3
push argument 1
push constant 3
add
pop pointer 1
push that 0
call ENC28J60.writeControlRegister 2
pop temp 0
push constant 0
push argument 1
push constant 4
add
pop pointer 1
push that 0
call ENC28J60.writeControlRegister 2
pop temp 0
push constant 1
push argument 1
push constant 5
add
pop pointer 1
push that 0
call ENC28J60.writeControlRegister 2
pop temp 0
push constant 31
push constant 1
call ENC28J60.bitFieldClear 2
pop temp 0
push constant 20
push constant 16
call ENC28J60.writeControlRegister 2
pop temp 0
push constant 22
push constant 0
call ENC28J60.writeControlRegister 2
pop temp 0
push constant 23
push constant 1
call ENC28J60.writeControlRegister 2
pop temp 0
push constant 1
call Sys.wait 1
pop temp 0
push constant 31
push constant 3
call ENC28J60.bitFieldClear 2
pop temp 0
push constant 31
push constant 4
call ENC28J60.bitFieldSet 2
pop temp 0
push constant 0
return
function ENC28J60.transmitPacket 4
push constant 2
push constant 0
call ENC28J60.writeControlRegister 2
pop temp 0
push constant 3
push constant 16
call ENC28J60.writeControlRegister 2
pop temp 0
push constant 1
call String.new 1
pop local 1
push local 1
push constant 0
call String.appendChar 2
pop temp 0
push local 1
push argument 0
call List.new 2
pop local 2
push constant 16
push constant 256
call Math.multiply 2
pop local 0
push local 2
pop argument 0
label while8
push argument 0
push constant 0
eq
not
not
if-goto whileend8
push argument 0
call List.getData 1
pop local 3
push local 3
call ENC28J60.writeBufferMemory 1
pop temp 0
push local 0
push local 3
call String.length 1
add
pop local 0
push argument 0
call List.getNext 1
pop argument 0
goto while8
label whileend8
push local 0
push constant 1
sub
pop local 0
push local 2
call List.pop 1
pop local 2
push constant 4
push constant 0
call ENC28J60.writeControlRegister 2
pop temp 0
push constant 5
push constant 16
call ENC28J60.writeControlRegister 2
pop temp 0
push constant 6
push local 0
push constant 255
and
call ENC28J60.writeControlRegister 2
pop temp 0
push constant 7
push local 0
push constant 256
call Math.divide 2
call ENC28J60.writeControlRegister 2
pop temp 0
push constant 31
push constant 128
call ENC28J60.bitFieldSet 2
pop temp 0
push constant 31
push constant 128
call ENC28J60.bitFieldClear 2
pop temp 0
push constant 31
push constant 8
call ENC28J60.bitFieldSet 2
pop temp 0
label while28
push constant 31
call ENC28J60.readControlRegister 1
push constant 8
and
push constant 8
eq
not
if-goto whileend28
goto while28
label whileend28
push constant 0
return
function ENC28J60.receivePacket 4
push constant 31
push constant 1
call ENC28J60.bitFieldSet 2
pop temp 0
push constant 25
call ENC28J60.readControlRegister 1
pop local 3
push constant 31
push constant 3
call ENC28J60.bitFieldClear 2
pop temp 0
push local 3
push constant 0
gt
if-goto if5
goto ifelse5
label if5
push constant 0
push static 1
push constant 255
and
call ENC28J60.writeControlRegister 2
pop temp 0
push constant 1
push static 1
push constant 256
call Math.divide 2
call ENC28J60.writeControlRegister 2
pop temp 0
push constant 6
call Array.new 1
pop local 0
push local 0
push constant 6
call ENC28J60.readBufferMemory 2
pop temp 0
push local 0
push constant 2
add
pop pointer 1
push that 0
push local 0
push constant 3
add
pop pointer 1
push that 0
push constant 256
call Math.multiply 2
or
push constant 4
sub
pop local 1
push local 0
push constant 0
add
pop pointer 1
push that 0
push local 0
push constant 1
add
pop pointer 1
push that 0
push constant 256
call Math.multiply 2
or
pop static 1
push local 0
call Array.dispose 1
pop temp 0
push local 1
call Array.new 1
pop local 0
push local 0
push local 1
call ENC28J60.readBufferMemory 2
pop temp 0
push static 1
pop local 2
push local 2
push constant 0
eq
if-goto if16
goto ifelse16
label if16
push constant 15
push constant 256
call Math.multiply 2
push constant 255
add
pop local 2
goto ifend16
label ifelse16
push local 2
push constant 1
sub
pop local 2
label ifend16
push constant 12
push local 2
push constant 255
and
call ENC28J60.writeControlRegister 2
pop temp 0
push constant 13
push local 2
push constant 256
call Math.divide 2
call ENC28J60.writeControlRegister 2
pop temp 0
push constant 30
push constant 64
call ENC28J60.bitFieldSet 2
pop temp 0
push local 0
push local 1
call Ethernet.read 2
pop temp 0
push local 0
call Array.dispose 1
pop temp 0
label ifelse5
push constant 0
return
