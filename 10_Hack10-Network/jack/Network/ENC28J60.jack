/**  
*  Driver class for ENC28J60
*  see Datasheet for details
*/

class ENC28J60{

	static Array spi;
	static int nextPacketPtr;

	/** 4.2.1 read control register command */		
	function int readControlRegister(int address){
		var int r;
		let spi[0] = 512 | address;
		let spi[0] = 512;
		let r = spi[0];
		let spi[0] = 256; 
		return r;
	}

	/** 4.2.2 read buffer memory command */	
	function void readBufferMemory(Array data, int len){
		var int i;
		let spi[0] = 512 | 58;
		let i=0;
		while (i<len) {
			let spi[0] = 512;
			let data[i] = spi[0];
			let i = i+1; 
		}
		let spi[0] = 256;
		return;
	}

	/** 4.2.3 write control register command */	
	function void writeControlRegister(int address, int data){
		let spi[0] = (512 + 64) | address;
		let spi[0] = 512 | data;
		let spi[0] = 256;
		return;	
	}

	/** 4.2.4 write buffer memory command */
	function void writeBufferMemory(String data){
		var int i;
		var int len;
		let len = data.length();
		let spi[0] = (512 | 122);
		let i=0;
		while (i<len) {
			let spi[0] = 512 | data.charAt(i);
			let i = i + 1; 
		}
		let spi[0] = 256;
		return;
	}

	/** 4.2.5 bit field set command */	
	function void bitFieldSet(int address, int bits){
		let spi[0] = (512 | 128 | address);
		let spi[0] = (512 | bits);
		let spi[0] = 256;
		return;
	}

	/** bit field clear command */
	function void bitFieldClear(int address, int bits){
		let spi[0] = (512 | 160 | address);
		let spi[0] = (512 | bits);
		let spi[0] = 256;
		return;
	}

	/** system reset command */
	function void systemResetCommand(){
		let spi[0] = 512 | 255;
		let spi[0] = 256;
		return;
	}

	/** 6.0 initialisation */
	function void init(int address, Array mac){
		let spi = address;
		let spi[0] = 256;	//chip select idle = high

		do ENC28J60.systemResetCommand();
		// see errata 2: Reset
		do Sys.wait(2);

		// 6.1 receive buffer
		// see errata 5: Memory
		// ERXST = 0x0000
		// first address of receive buffer
		do ENC28J60.writeControlRegister(8,0);	
		do ENC28J60.writeControlRegister(9,0);
		// ERXND = 0x0FFF
		// last address of receive buffer
		do ENC28J60.writeControlRegister(10,255);	
		do ENC28J60.writeControlRegister(11,15);
		// see errata 14: Memory
		// ERXRDPT = 0x0FFF
		do ENC28J60.writeControlRegister(12,255);	
		do ENC28J60.writeControlRegister(13,15);	
		let nextPacketPtr = 0;		
		
		// 6.2 transmit buffer
		// no explicit action needed 

		// 6.3 receive filter
		// ERXFCON = 0b10100001 (default)
		// unicast or broadcast with valid CRC

		// 6.4 waiting for oscillator start up
		// see errata

		// 6.5 MAC initialisation
		// select bank 2
		do ENC28J60.bitFieldSet(31,2);
		// MACON1 = 0b00001101 = TXPAUS|RXPAUS|MARXEN
		do ENC28J60.writeControlRegister(0,13);
		// MACON3 = 0b00110010
		// PADCFG = 001 All short frames will be zero-padded to 60 bytes and a valid CRC
		// TXCRCEN = 1 MAC will add CRC to all transmitted frames
		// FRMLNEN = 1 MAC will check frame length
		do ENC28J60.writeControlRegister(2,50);
		// MACON4 = 0b010000000
		// DEFER = 1 (when medium is occupied wait)
		do ENC28J60.writeControlRegister(3,128);
		// MABBIPG 0x12 (see datasheet)
		do ENC28J60.writeControlRegister(4,18);
		// MAIPG = 0x0C12
		do ENC28J60.writeControlRegister(6,18);
		do ENC28J60.writeControlRegister(7,12);
		// select bank 3
		do ENC28J60.bitFieldSet(31,3);
		// MAADR1:6 = MAC-Address
		do ENC28J60.writeControlRegister(4,mac[0]);
		do ENC28J60.writeControlRegister(5,mac[1]);
		do ENC28J60.writeControlRegister(2,mac[2]);
		do ENC28J60.writeControlRegister(3,mac[3]);
		do ENC28J60.writeControlRegister(0,mac[4]);
		do ENC28J60.writeControlRegister(1,mac[5]);
		
		// 6.6 PHY initialisation
		// select bank 2
		do ENC28J60.bitFieldClear(31,1);
		// PHCON2 (0x10) = 0b00000001 00000000
		// HDLDIS = 1 PHY Half duplex loopback disable
		do ENC28J60.writeControlRegister(20,16);
		do ENC28J60.writeControlRegister(22,0);
		do ENC28J60.writeControlRegister(23,1);
		do Sys.wait(1);
		// PHLCON (0x14) = 0b00000100 00100010 (default)
		// LACFG = 0100 display link status
		// LBCFG = 0010 display receive activity
		// LFRQ = 00 stretch normal (40 ms)
		// STRCH = 1 stretch

		// 7.2 receiving packets	
		// switch to bank 0
		do ENC28J60.bitFieldClear(31,3);
		// ECON1 = 0b00000100
		// RXEN = 1 enable packet reception
		do ENC28J60.bitFieldSet(31,4);
		return;
	}

	/** 7.1 transmitting packets */
	function void transmitPacket(List list){
		var int ETXND;
		var String controlByte;
		var List packet;
		var String s;
		// start of transmit buffer
		do ENC28J60.writeControlRegister(2, 0);
  		do ENC28J60.writeControlRegister(3, 16);
  		// add control byte to buffer
		let controlByte = String.new(1);
		do controlByte.appendChar(0);
		let packet = List.new(controlByte,list);
		
		// write transmit buffer
		let ETXND = 16*256;
		let list = packet;
		while (~(list = null)){
			let s = list.getData();
    		do ENC28J60.writeBufferMemory(s);
			let ETXND = ETXND + s.length();
			let list = list.getNext();
		}
		let ETXND = ETXND-1;
		let packet = packet.pop();
  		
		// set ETXST and ETXND
  		do ENC28J60.writeControlRegister(4,0);
  		do ENC28J60.writeControlRegister(5,16);
  		do ENC28J60.writeControlRegister(6,ETXND & 255);
  		do ENC28J60.writeControlRegister(7,ETXND / 256);
  
  		// See Rev. B7 Silicon Errata issues 12 and 13
  		// Reset the transmit logic problem. Errata 12
  		// ECON1 (0x1F) = 0b1000000
  		// TXRST = 1 transmission reset
  		do ENC28J60.bitFieldSet(31, 128);
  		do ENC28J60.bitFieldClear(31, 128);
  
  		// ECON1 (0x1F) = 0b00001000
  		// TXRTS = 1 transmision request to send
  		do ENC28J60.bitFieldSet(31, 8);
	
		// wait for transmit 
		while ((ENC28J60.readControlRegister(31) & 8) = 8){
			//do Output.printChar(46);
		}
		return;
	} 

	/** 7.2 Receiving Packets */	
	function void receivePacket(){
		var Array buffer;
		var int len;
		var int freePtr;
		var int EPKTCNT;
		
		// read packet counter
		do ENC28J60.bitFieldSet(31,1);
		let EPKTCNT = ENC28J60.readControlRegister(25);
		do ENC28J60.bitFieldClear(31,3);

		if (EPKTCNT>0){
			// set pointer to next packet
			do ENC28J60.writeControlRegister(0,nextPacketPtr & 255);
			do ENC28J60.writeControlRegister(1,nextPacketPtr / 256);
			
			// status of packet in first 6 bytes
			let buffer = Array.new(6);
			do ENC28J60.readBufferMemory(buffer,6);
			let len = (buffer[2] | (buffer[3]*256)) - 4;

// DEBUG
//			do UART.printString("ENC28J60 received: ");
//			do UART.printInt(len);
//			do UART.printString(" bytes");
//			do UART.println();	
//			do UART.printString("Packet pointer: ");
//			do UART.printInt(nextPacketPtr);
//			do UART.println();			
			
			// save next packet pointer
			let nextPacketPtr = buffer[0] | (buffer[1]*256);
			do buffer.dispose();

			// read buffer for data
			let buffer = Array.new(len);
			do ENC28J60.readBufferMemory(buffer,len);
			
			// freeing receive buffer
			// see errata 14: Memory
			let freePtr = nextPacketPtr;
			if (freePtr = 0){
				let freePtr = (15*256)+255;
			} else {
				let freePtr = freePtr-1;
			}
			do ENC28J60.writeControlRegister(12,freePtr&255);
			do ENC28J60.writeControlRegister(13,freePtr/256);
			
			// decrement packet counter	
			do ENC28J60.bitFieldSet(30,64);

			// read ethernet header
			do Ethernet.read(buffer,len);
			do buffer.dispose();
		}
		return;
	}

}
