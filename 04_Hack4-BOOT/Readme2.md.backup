# Project 4: Hack4-BOOT
We will now add bootlogic so we can use external SRAM as instruction memory. At boottime Hack receives Bytes over UART-RX and writes the received Hack code to SRAM. Then we will switch execution to external SRAM. For this we need a Switch.v RUN which can switch between the modes:
1. RUN=0: Execute bootloader in ROM (FPGA) which writes bytes received by UART to SRAM.
2. RUN=1: use SRAM as instruction memory and execute this code.

## Hack4.v
Hack4.v is our top level module of Hack4-BOOT.

![](Hack4.png)


 |address | memory|R/W|function|
 |-|-|-|-|
 |0-2047  | RAM|R/W|R0--R15, static, stack, heap|
 | 8192    | but|R/W|0 = button pressed, 1 = button released|
 | 8193    | led|R/W|0 = led off, 1 = led on|
 | 8194    | UART-TX|R|-1 = busy, 0 = ready|
 | 8194    | UART-TX|W|write char to be send|
 | 8195    | UART-RX|R|>=0 received byte, <0 busy|
 | 8195    | UART-RX|W|write -1 to clear buffer|
 |8196|r_sram_addr|R|SRAM address for next operation|
 |8196|r_sram_addr|W|start read procedure|
 |8197|r_sram_data|R|SRAM data at selected address|
 |8197|r_sram_data|W|start write procedure|
 |8198|boot|W|switch instruction memory to external SRAM and reset CPU|

![](dia/mem.png)



### boot.asm
The bootloader is written in assembler. It implements a final state machine with 4 states (beginning with state 01):

* 00: RUN!
* 01: BOOT
* 10: WRITE to SRAM
* 11: ERROR

![](dia/bootloader.png)


The state is stored @8192 so you can see what hack is doing at leds!

```
(START)		
@8192		//state 01
M=1

@8196		//set PROM Address to 0
M=0

(NEXT)
@0			//clear data
M=0

(WAIT_RX)	//Wait for char
@8195
D=M
@WAIT_RX
D;JLT

@8195		//clear rx-buffer
M=-1

@20			//char==\n ?
D=D-A
@CHAR_NL
D;JLE

@8192		//again in state 01
M=1

@28			//char==0 ?
D=D-A
@CHAR_0
D;JEQ

D=D-1		//char==1 ?
@CHAR_1
D;JEQ

@3
D=A
@8192		//error state = 3
M=D

(HALT)
@HALT		//next char
0;JMP

(CHAR_0)	//char 0
@0
D=M

M=D+M
@WAIT_RX
0;JMP

(CHAR_1)	//char 1
@0
D=M
M=D+M
M=M+1
@WAIT_RX
0;JMP

(CHAR_NL)	//char \n
@0
D=M
@8197
M=D
@8196
M=M+1
@8192		//last char \n?
D=M-1
@CHAR_EOT
D;JNE
@8192		//last char is \n
M=M+1
@NEXT
0;JMP

(CHAR_EOT)
@8192		//LED 0 run
M=0
@8198		//jump to SRAM
AMD=0
0;JMP
```

### Simulation
run `apio sim` and check read and write-timings of SRAM. When ack receives to consecutive `\n` chars. The bootloader should switch execution to external SRAM.

Check that HACK receives 12 bytes over UART-RX: ``0,0,0,0,0,\n,1,1,1,\n,\n`` and write two bytes to SRAM (SRAM[0]=0, SRAM[1]=7). Assert that leds show the state of the bootloader.
 
![](hack-4-boot/boot1.png)

Inspect details after receiving two consecutive bytes ``\n,\n`` where execution goes to SRAM (bootloader mode 00 = RUN!). From this point sram_addr outputs the programmcounter (pc).

![](hack-4-boot/boot2.png)

### Proof
run `apio upload` to upload Hack-4-BOOT to iCE40. Then switch olimexino 32u4 to UART-Bridge and launch a terminal connection to UART:

```
$ apio upload
$ (change mode of olimexino 32u4 to UART-Bridge)
$ screen /dev/ttyACM0 115200
```

Now you should be able to enter Hack code in the terminal. After entering two consecutive `\n` chars execution should go to external SRAM running your program.

While entering `leds.hack` in your terminal you should inspect status of bootloader shown on leds of board.
* 01 = while entering 0 or 1
* 10 = after new line is entered (bootloader writes to SRAM)
* 11 = error (you entered some strange char)
* 00 = after entering two consecutive new lines, bootloader starts programm execution in SRAM!

After programm execution is switched to SRAM you should be able to control leds with but, since the entered hack-code just demands this.

```
0010000000000001 <enter>
1111110000010000 <enter>
0010000000000000 <enter>
1110001100001000 <enter>
0000000000000000 <enter>
1110101010000111 <enter>
<enter>
```

Test hack-4-boot with the following programs:

```
cat asm/leds/leds.hack > /dev/ttyACM0
cat asm/blinky/blinky.hack > /dev/ttyACM0
cat asm/echo/echo.hack > /dev/ttyACM0
```

**Note 1:** Your HACK-assembler has to be modified so to add one empty line at the end of hack-file.

**Note 2:** Your HACK-assembler has to be modified to handle jumps to memory > 32767.

**Note 3:** The assembler provided in `tools/Assembler` does the job. Simply use the provided `Makefile`s to compile and upload assembler/JACK programs to fpga.

e.g.:
```
cd asm/blinky
make
```


## Jack OS
When uploading code to SRAM works, we are ready to implement parts of JACK OS and run bigger Hack-programs:

### jack/echo-char
We want to rewrite echo-char using the Jack-OS. For this we have to write ``UART.jack``, so  that echo-char reads:
```  
class Sys{

	function void init(){
		do UART.init();
		while (true){
			do UART.tx(UART.rx());
		}
	}
}
```

### jack/echo-String
This time we are echoing Strings. The `Main.jack` class is given as:
```
class Main{

	function void main(){
		while (true){
			do UART.printString(UART.input());
			do UART.println();
		}
		return;
	}
}

```

For this to run you have to rewrite parts of JACK-OS from original nand2tetris.

1. Math.jack: Can be used without changes.
2. Memory.jack: Note that we have only 3840 words of RAM.
3. Array.jack: Can be used without changes
4. UART.jack: This of course is new implementation. It replaces Keyboard.jack and Output.jack
5. Sys.jack: use UART.println() and UART.printInt() instead of Output.println() and Output.printIn()

### jack/Average
With your OS you now can run Jack-application `Average`!
